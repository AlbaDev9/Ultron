const { MessageEmbed } = require('discord.js')
const { MessageButton, MessageActionRow } = require('discord-buttons')

module.exports = {
    tictactoe: async function (message) {

        if (!message) throw new Error('You must write the value of your message event')

        let opponent = message.mentions.members.first()
        if(!opponent) return message.channel.send("Please provide the user to challenge!")
        let fighters = [message.member.id, opponent.id].sort(() => (Math.random() > .5) ? 1 : -1)
        let Args = {
            user: 0,
            a1: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            a2: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            a3: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            b1: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            b2: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            b3: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            c1: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            c2: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            },
            c3: {
                style: "gray",
                label: "‚ûñ",
                disabled: false
            }
        }
        let msg = await message.channel.send(`**TicTacToe** | <@!${Args.userid}>'s turn (‚≠ï)`)
        tictactoe1(msg)
        async function tictactoe1(m) {
            Args.userid=fighters[Args.user]
            let won = {
                "‚≠ï": false,
                "‚ùå": false
            }
            if (Args.a1.label == "‚≠ï" && Args.b1.label == "‚≠ï" && Args.c1.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.a2.label == "‚≠ï" && Args.b2.label == "‚≠ï" && Args.c2.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.a3.label == "‚≠ï" && Args.b3.label == "‚≠ï" && Args.c3.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.a1.label == "‚≠ï" && Args.b2.label == "‚≠ï" && Args.c3.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.a3.label == "‚≠ï" && Args.b2.label == "‚≠ï" && Args.c1.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.a1.label == "‚≠ï" && Args.a2.label == "‚≠ï" && Args.a3.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.b1.label == "‚≠ï" && Args.b2.label == "‚≠ï" && Args.b3.label == "‚≠ï") won["‚≠ï"] = true
            if (Args.c1.label == "‚≠ï" && Args.c2.label == "‚≠ï" && Args.c3.label == "‚≠ï") won["‚≠ï"] = true
            if (won["‚≠ï"] != false) return m.edit('‚≠ï won!')
            if (Args.a1.label == "‚ùå" && Args.b1.label == "‚ùå" && Args.c1.label == "‚ùå") won["‚ùå"] = true
            if (Args.a2.label == "‚ùå" && Args.b2.label == "‚ùå" && Args.c2.label == "‚ùå") won["‚ùå"] = true
            if (Args.a3.label == "‚ùå" && Args.b3.label == "‚ùå" && Args.c3.label == "‚ùå") won["‚ùå"] = true
            if (Args.a1.label == "‚ùå" && Args.b2.label == "‚ùå" && Args.c3.label == "‚ùå") won["‚ùå"] = true
            if (Args.a3.label == "‚ùå" && Args.b2.label == "‚ùå" && Args.c1.label == "‚ùå") won["‚ùå"] = true
            if (Args.a1.label == "‚ùå" && Args.a2.label == "‚ùå" && Args.a3.label == "‚ùå") won["‚ùå"] = true
            if (Args.b1.label == "‚ùå" && Args.b2.label == "‚ùå" && Args.b3.label == "‚ùå") won["‚ùå"] = true
            if (Args.c1.label == "‚ùå" && Args.c2.label == "‚ùå" && Args.c3.label == "‚ùå") won["‚ùå"] = true
            if (won["‚ùå"] != false) return m.edit('‚ùå won!')
            let a1 = new MessageButton()
                .setStyle(Args.a1.style)
                .setLabel(Args.a1.label)
                .setID('a1')
                .setDisabled(Args.a1.disabled);
            let a2 = new MessageButton()
                .setStyle(Args.a2.style)
                .setLabel(Args.a2.label)
                .setID('a2')
                .setDisabled(Args.a2.disabled);
            let a3 = new MessageButton()
                .setStyle(Args.a3.style)
                .setLabel(Args.a3.label)
                .setID('a3')
                .setDisabled(Args.a3.disabled);
            let b1 = new MessageButton()
                .setStyle(Args.b1.style)
                .setLabel(Args.b1.label)
                .setID('b1')
                .setDisabled(Args.b1.disabled);
            let b2 = new MessageButton()
                .setStyle(Args.b2.style)
                .setLabel(Args.b2.label)
                .setID('b2')
                .setDisabled(Args.b2.disabled);
            let b3 = new MessageButton()
                .setStyle(Args.b3.style)
                .setLabel(Args.b3.label)
                .setID('b3')
                .setDisabled(Args.b3.disabled);
            let c1 = new MessageButton()
                .setStyle(Args.c1.style)
                .setLabel(Args.c1.label)
                .setID('c1')
                .setDisabled(Args.c1.disabled);
            let c2 = new MessageButton()
                .setStyle(Args.c2.style)
                .setLabel(Args.c2.label)
                .setID('c2')
                .setDisabled(Args.c2.disabled);
            let c3 = new MessageButton()
                .setStyle(Args.c3.style)
                .setLabel(Args.c3.label)
                .setID('c3')
                .setDisabled(Args.c3.disabled);
            let a = new MessageActionRow()
                .addComponents([a1, a2, a3])
            let b = new MessageActionRow()
                .addComponents([b1, b2, b3])
            let c = new MessageActionRow()
                .addComponents([c1, c2, c3])
            let buttons = { components: [a, b, c] }
            m.edit(`**TicTacToe** | <@!${Args.userid}>'s turn (${Args.user == 0 ? "‚≠ï" : "‚ùå"})`, buttons)
            const filter = (button) => button.clicker.user.id === Args.userid;
            const collector = m.createButtonCollector(filter, { max: 1, time: 30000 });

            collector.on('collect', b => {
                if (Args.user == 0) {
                    Args.user = 1
                    Args[b.id] = {
                        style: "green",
                        label: "‚≠ï",
                        disabled: true
                    }
                } else {
                    Args.user = 0
                    Args[b.id] = {
                        style: "red",
                        label: "‚ùå",
                        disabled: true
                    }
                }
                b.defer()
                const map = (obj, fun) =>
                    Object.entries(obj).reduce(
                        (prev, [key, value]) => ({
                            ...prev,
                            [key]: fun(key, value)
                        }),
                        {}
                    );
                const objectFilter = (obj, predicate) =>
                    Object.keys(obj)
                        .filter(key => predicate(obj[key]))
                        .reduce((res, key) => (res[key] = obj[key], res), {});
                let Brgs = objectFilter(map(Args, (_, fruit) => fruit.label == "‚ûñ"), num => num == true);
                if (Object.keys(Brgs).length == 0) return m.edit('It\'s a tie!')
                tictactoe1(m)
            });
            collector.on('end', collected => {
                if (collected.size == 0) m.edit(`<@!${Args.userid}> didn\'t react in time! (30s)`)
            });
        }
    },
    applications: async function (message, role, [q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13], staffRoleID) {
        
        if (!message) throw new Error('You must write the value of your message event')
        if (!role) throw new Error('Please write the name of the role your doing in your Application')
        if (!staffRoleID) throw new Error('Please input the id of the role who can view the apps')
        if (typeof role !== 'string') throw new Error('The name of the staff role must be a string')
        if (isNaN(staffRoleID)) throw new Error('The id must be numbers')

        if (!q1) throw new Error('You must enter minimum one question')
        if (q13) throw new Error('Maximum questions are 12')

        let btns = new MessageButton()
        .setStyle('blurple')
        .setLabel(role)
        .setEmoji('üìÑ')
        .setID('app' + role)

        const row = new MessageActionRow()
        .addComponent(btns)

        let embed = new MessageEmbed()
        .setTitle('Staff Apps for you')
        .setAuthor(message.author.tag, message.author.displayAvatarURL({ dynamic: true }))
        .setDescription('Click the button to start with the application')

        await message.channel.send({
            embed: embed,
            components: row
        }).then((msg) => {
            const filter = (button) => button.clicker.user.id === message.author.id 
            const collector = msg.createButtonCollector(filter, { max: 1, time: 30000 });

            collector.on('collect', async (btn) => {
                if (btn.id === `app${role}`) {
                    btn.defer()
    
                    let embed1 = new MessageEmbed()
                    .setTitle(`${role} applications for ${btn.clicker.user.tag}`)
                    .setColor('BLUE')
                    .setFooter('Apps opened at')
                    .setTimestamp()
    
                    if (!q2) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1}`)
                    else if (!q3) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2}`)
                    else if (!q4) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3}`)
                    else if (!q5) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4}`)
                    else if (!q6) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5}`)
                    else if (!q7) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6}`)
                    else if (!q8) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6} \n**7.**${q7}`)
                    else if (!q9) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6} \n**7.**${q7} \n**8.**${q8}`)
                    else if (!q10) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6} \n**7.**${q7} \n**8.**${q8} \n**9.**${q9}`)
                    else if (!q11) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6} \n**7.**${q7} \n**8.**${q8} \n**9.**${q9} \n**10.**${q10}`)
                    else if (!q12) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6} \n**7.**${q7} \n**8.**${q8} \n**9.**${q9} \n**10.**${q10} \n**11.**${q11}`)
                    else if (q12) embed1.setDescription(`Fill this questions here. \n\n**1.**${q1} \n**2.**${q2} \n**3.**${q3} \n**4.**${q4} \n**5.**${q5} \n**6.**${q6} \n**7.**${q7} \n**8.**${q8} \n**9.**${q9} \n**10.**${q10} \n**11.**${q11} \n**12.**${q12}`)
    
                    const ch = message.guild.channels.create(`${btn.clicker.user.username}`, {
                        type: 'text',
                        permissionOverwrites: [
                            {
                                id: message.author.id,
                                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY', 'ATTACH_FILES']
                            },
                            {
                                id: staffRoleID,
                                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY', 'ATTACH_FILES']
                            },
                            {
                                id: message.guild.roles.everyone,
                                deny: ['VIEW_CHANNEL', 'READ_MESSAGE_HISTORY']
                            }
                        ]
                    }).then(channel => {
                        channel.send(embed1).then(msg2 => {
                            msg2.pin()
                        })
                    })

                    const row1 = new MessageActionRow()
                    .addComponent(btns.setDisabled())

                    msg.edit({
                        embed: embed,
                        components: row1
                    })
                    
                }
            })

        })

    },
    purge: async function (message, [bulk1, bulk2, bulk3]) {

        if (!message) throw new Error('You must write the value of your message event')
        if (!bulk1) throw new Error('You must enter a value of how many messages you want to be deleted for the first button, 0 messages not allowed')
        if (!bulk2) throw new Error('You must enter a value of how many messages you want to be deleted for the second button, 0 messages not allowed')
        if (!bulk3) throw new Error('You must enter a value of how many messages you want to be deleted for the third button, 0 messages not allowed')

        if (bulk1 > 100) throw new Error("You can't delete more than 100 messages")
        if (bulk2 > 100) throw new Error("You can't delete more than 100 messages")
        if (bulk3 > 100) throw new Error("You can't delete more than 100 messages")

        if (isNaN(bulk1)) throw new Error("Only numbers allowed")
        if (isNaN(bulk2)) throw new Error("Only numbers allowed")
        if (isNaN(bulk3)) throw new Error("Only numbers allowed")

        if (!message.member.hasPermission('MANAGE_MESSAGES')) return message.channel.send('You need the `MANAGE_MESSAGES` permission to run this command')
            
        if (!message.guild.me.hasPermission('MANAGE_MESSAGES')) return message.channel.send('I need the `MANAGE_MESSAGES` permission to run this command')

        const btn1 = new MessageButton()
        .setStyle('blurple')
        .setLabel(`${bulk1}`)
        .setID('bulk1')

        const btn2 = new MessageButton()
        .setStyle('green')
        .setLabel(`${bulk2}`)
        .setID('bulk2')

        const btn3 = new MessageButton()
        .setStyle('red')
        .setLabel(`${bulk3}`)
        .setID('bulk3')

        const row = new MessageActionRow()
        .addComponents([ btn1, btn2, btn3 ])

        let embed = new MessageEmbed()
        .setTitle('Delete Messages')
        .setDescription(`${message.author.tag} how many messages you want to delete?`)
        .setColor('ORANGE')
        .setTimestamp()

        message.channel.send({
            embed: embed,
            components: row
        }).then((msg) => {
            msg.delete({ timeout: 30000 })
            const filter = (button) => button.clicker.user.id === message.author.id 
            const collector = msg.createButtonCollector(filter, { max: 1, time: 30000 });

            collector.on('collect', async (btn) => {
                if (btn.id === 'bulk1') {
                    btn.defer()
                    message.channel.messages.fetch({ limit: 100 }).then(messages => {
                        message.channel.bulkDelete(bulk1)
                        message.channel.send(bulk1 + " messages deleted successfully").then(msgs => {
                            msgs.delete({ timeout: 5000 }).catch(() => {})
                        })

                        const row1 = new MessageActionRow()
                        .addComponents([ btn1.setDisabled(), btn2.setDisabled(), btn3.setDisabled()])
                        msg.edit({
                            embed: embed,
                            components: row1
                        })
                    })
                } else if (btn.id === 'bulk2') {
                    btn.defer()
                    message.channel.messages.fetch({ limit: 100 }).then(messages => {
                        message.channel.bulkDelete(bulk2)
                        message.channel.send(bulk2 + " messages deleted successfully").then(msgs => {
                            msgs.delete({ timeout: 5000 }).catch(() => {})
                        })

                        const row2 = new MessageActionRow()
                        .addComponents([ btn1.setDisabled(), btn2.setDisabled(), btn3.setDisabled()])
                        msg.edit({
                            embed: embed,
                            components: row2
                        })
                    })
                } else if (btn.id === 'bulk3') {
                    btn.defer()
                    message.channel.messages.fetch({ limit: 100 }).then(messages => {
                        message.channel.bulkDelete(bulk3)
                        message.channel.send(bulk3 + " messages deleted successfully").then(msgs => {
                            msgs.delete({ timeout: 5000 }).catch(() => {})
                        })

                        const row3 = new MessageActionRow()
                        .addComponents([ btn1.setDisabled(), btn2.setDisabled(), btn3.setDisabled()])
                        msg.edit({
                            embed: embed,
                            components: row3
                        })
                    })
                }
            })
        })

    }
}